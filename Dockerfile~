# Use uma imagem base oficial do Python
FROM python:3.9-slim-bullseye

# Define o ambiente como não-interativo para evitar prompts durante apt-get
ENV DEBIAN_FRONTEND=noninteractive

# Define o diretório de trabalho dentro do contêiner
WORKDIR /app

# Copia o arquivo requirements.txt para o diretório de trabalho
COPY requirements.txt .

# --- Adiciona dependências de sistema e ferramentas de compilação ---
# Atualiza a lista de pacotes e instala as dependências comuns para pacotes Python.
# dpkg-dev, build-essential: ferramentas de compilação
# libpq-dev: para pacotes como psycopg2 (PostgreSQL)
# libjpeg-dev, zlib1g-dev: para pacotes como Pillow (manipulação de imagens)
# netcat: ferramenta útil para verificar conectividade (opcional, mas comum em builds)
# libatlas-base-dev: para numpy/pandas
# apt-get clean e rm -rf /var/lib/apt/lists/* para reduzir o tamanho final da imagem
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        dpkg-dev \
        build-essential \
        libpq-dev \
        libjpeg-dev \
        zlib1g-dev \
        netcat \
        libatlas-base-dev && rm -rf /var/lib/apt/lists/* # <- MUDANÇA AQUI: `rm -rf` na mesma linha

# Instala as dependências listadas no requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Copia todo o conteúdo do seu diretório src (onde está o main.py e outras pastas)
# para o diretório de trabalho dentro do contêiner.
COPY src /app/src

# Define a variável de ambiente para que o Python encontre os módulos do seu app
ENV PYTHONPATH=/app/src

# Comando para executar seu aplicativo quando o contêiner iniciar
CMD ["python", "src/omie_remessas/main.py"]

# Se sua aplicação for uma API web e escutar em uma porta, você deve expô-la.
# Por exemplo, se sua API rodar na porta 8000, descomente a linha abaixo:
# EXPOSE 8000